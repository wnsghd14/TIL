# 이 문제는 각 숫자가 각 자릿수에서 몇번 나오는지 알 수 있으면 가장 큰 자릿수에 많이 나온 알파벳부터 9씩 할당해주면 풀 수 있다.
# 수의 최대 길이는 8이기 때문에 26 * 8 배열을 생성해서 각 알파벳이 몇번째 자리에 얼마나 나오는지 알 수 있을거라고 생각했다.
# 위의 결과를 보니 가중치를 다르게 주는 것으로 한 배열에 표현할 수 있을 것 같다는 생각을 했다.
# 각 자릿수만큼의 가중치를 1, 10, 100, 1000이런 식으로 주는 것이다.
# 단어가 ABC 라면 [100, 10, 1, 0, .... , 0] 이런식으로 들어가게 되는 것이고
# ABAB라면 [1010, 101, 0, .... , 0] 이런식으로 10**자릿수로 수를 표현하게 되면 1차원 배열에 나타낼 수 있
# 26개의 알파벳을 나타낼 배열을 지정하고 ord()를 이용하여 각 단어를 ASCII코드에 해당하는 값으로 변경해줬다.
# ord('A') = 65이기 때문에 - 65를 해서 A가 0번에 위치할 수 있게 조정했다.

score = [0 for _ in range(26)]
answer = 0

n = int(input())
for _ in range(n):
    tmp = input()
    l = len(tmp)
    for i in range(l):
        score[ord(tmp[i])-65]+=10**(l-1-i)
score.sort(reverse=True)
for i in range(9,0,-1):
    answer += i * score[9-i]
print(answer)